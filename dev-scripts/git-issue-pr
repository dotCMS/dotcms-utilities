#!/bin/bash

# git-issue-pr - Create pull requests linked to GitHub issues
# Usage: git issue-pr [--help]

# Determine the directory of the calling script
script_dir="$(dirname "$(realpath "$0")")"

# Call the check_updates.sh script from the determined directory
"$script_dir/check_updates.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Show help message
show_help() {
    echo -e "${BLUE}git-issue-pr - Create pull requests linked to GitHub issues${NC}"
    echo ""
    echo -e "${YELLOW}Usage:${NC}"
    echo "  git issue-pr [--help]"
    echo ""
    echo -e "${YELLOW}Description:${NC}"
    echo "  Creates a pull request for the current branch, automatically linking it to"
    echo "  the GitHub issue based on the branch name. Supports conventional commit"
    echo "  format and interactive configuration."
    echo ""
    echo -e "${YELLOW}Features:${NC}"
    echo "  • Automatically detects issue number from branch name"
    echo "  • Fetches issue title from GitHub"
    echo "  • Interactive selection of commit type and scope"
    echo "  • Supports conventional commit format"
    echo "  • Links PR to issue automatically"
    echo ""
    echo -e "${YELLOW}Branch Format:${NC}"
    echo "  • Expected: issue-{number}-{description}"
    echo "  • Example: issue-123-fix-login-bug"
    echo ""
    echo -e "${YELLOW}Options:${NC}"
    echo "  --help, -h    Show this help message"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  git issue-pr          # Create PR for current branch"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --help|-h)
            show_help
            exit 0
            ;;
        *)
            echo -e "${RED}Error: Unknown option '$1'${NC}"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
    shift
done
# Enhanced user interaction and feedback
echo -e "${BLUE}Fetching current branch and issue information...${NC}"
echo "-------------------------------------------------"

# Check if gh is installed
if ! command -v gh &> /dev/null; then
    echo -e "${RED}GitHub CLI (gh) could not be found. Please install it to continue.${NC}"
    exit 1
fi

# Get current branch name and extract issue number
BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
ISSUE_NUMBER=$(echo "$BRANCH_NAME" | grep -o -E '^[0-9]+|issue-([0-9]+)' | grep -o -E '[0-9]+') # gh issue develop uses number at start by default

if [ -z "$ISSUE_NUMBER" ]; then
    echo -e "${RED}Error: No issue number found in the current branch name ($BRANCH_NAME).${NC}"
    echo -e "${BLUE}Ensure you are in the correct branch formatted like 'issue-123-your-feature'.${NC}"
    exit 1
fi

echo -e "${GREEN}Issue Number Detected: #$ISSUE_NUMBER${NC}"
echo "-------------------------------------------------"

# Fetch the issue title from GitHub
echo -e "${BLUE}Retrieving issue title from GitHub...${NC}"
ISSUE_TITLE=$(gh issue view "$ISSUE_NUMBER" --json title --jq '.title' | tr -cd '[[:alnum:]]._ ' | cut -c 1-50)
echo -e "${GREEN}Issue Title: $ISSUE_TITLE${NC}"
echo "-------------------------------------------------"

# Interactive selection for commit type and scope
echo -e "${YELLOW}Select the type and scope of your changes:${NC}"
COMMIT_TYPES=("fix" "feat" "chore" "refactor" "docs" "test" "ci" "build" "perf" "style" "revert" "NONE")
COMMIT_SCOPES=("uve" "core" "graphql" "sdk" "examples" "ui" "backend" "api" "workflow" "template-selector" "sessions" "content-search" "content-drive" "block-editor" "apps" "deployment" "ci" "docs" "deps" "NONE" "CUSTOM")

# Check if fzf is installed
if command -v fzf &> /dev/null; then
    FZF_AVAILABLE=1
else
    FZF_AVAILABLE=0
    echo -e "${YELLOW}fzf is not available, switching to manual selection.${NC}"
fi
if [ "$FZF_AVAILABLE" -eq 1 ]; then
    SELECTED_TYPE=$(printf "%s\n" "${COMMIT_TYPES[@]}" | fzf --height=50% --reverse --prompt="Select commit type: ")
    SELECTED_SCOPE=$(printf "%s\n" "${COMMIT_SCOPES[@]}" | fzf --height=50% --reverse --prompt="Select commit scope (or NONE for no scope): ")
else
    echo -e "${BLUE}Available commit types:${NC}"
    for i in "${!COMMIT_TYPES[@]}"; do
        echo "$((i+1)). ${COMMIT_TYPES[$i]}"
    done
    echo -e -n "${BLUE}Enter the number for the commit type:${NC} "
    read -r type_num
    SELECTED_TYPE=${COMMIT_TYPES[$((type_num-1))]}

    echo -e "${BLUE}Available commit scopes:${NC}"
    for i in "${!COMMIT_SCOPES[@]}"; do
        echo "$((i+1)). ${COMMIT_SCOPES[$i]}"
    done
    echo -e -n "${BLUE}Enter the number for the commit scope (enter for NONE):${NC} "
    read -r scope_num
    if [ -n "$scope_num" ]; then
        SELECTED_SCOPE=${COMMIT_SCOPES[$((scope_num-1))]}
    else
        SELECTED_SCOPE="NONE"
    fi
fi

# Handle custom scope input
if [ "$SELECTED_SCOPE" = "CUSTOM" ]; then
    echo -e -n "${BLUE}Enter your custom scope:${NC} "
    read -r CUSTOM_SCOPE
    if [ -n "$CUSTOM_SCOPE" ]; then
        SELECTED_SCOPE="$CUSTOM_SCOPE"
    else
        SELECTED_SCOPE="NONE"
    fi
fi

# Pre-define parentheses if scope is selected, otherwise set to an empty string
SCOPE_PREFIX=""
SCOPE_SUFFIX=""
if [ "$SELECTED_SCOPE" != "NONE" ]; then
    SCOPE_PREFIX="("
    SCOPE_SUFFIX=")"
else
    SELECTED_SCOPE=""
fi

# Construct the PR title with proper quoting and handling for special characters
PR_TITLE="${SELECTED_TYPE}${SCOPE_PREFIX}${SELECTED_SCOPE}${SCOPE_SUFFIX}: ${ISSUE_TITLE} (#$ISSUE_NUMBER)"
echo -e "${GREEN}Generated PR Title: $PR_TITLE${NC}"
echo "-------------------------------------------------"


# PR templates handling
TEMPLATE_PATH=".github/PULL_REQUEST_TEMPLATE"
SINGLE_TEMPLATE_PATH="$TEMPLATE_PATH.md" # Path for a single template

echo -e "${BLUE}Checking for PR templates...${NC}"

if [ -f "$SINGLE_TEMPLATE_PATH" ]; then
    echo -e "${GREEN}Single PR template found.${NC}"
    SELECTED_TEMPLATE="$SINGLE_TEMPLATE_PATH"
elif [ -d "$TEMPLATE_PATH" ]; then
    TEMPLATE_FILES=("$TEMPLATE_PATH"/*.md)

    # Check the number of templates
    if [ ${#TEMPLATE_FILES[@]} -eq 1 ]; then
        echo -e "${GREEN}Single PR template found in template directory.${NC}"
        SELECTED_TEMPLATE="${TEMPLATE_FILES[0]}"
    elif [ ${#TEMPLATE_FILES[@]} -gt 1 ]; then
        echo -e "${BLUE}Multiple PR templates found. Please select one:${NC}"
        if [ "$FZF_AVAILABLE" -eq 1 ]; then
            SELECTED_TEMPLATE=$(printf "%s\n" "${TEMPLATE_FILES[@]}" | fzf --height=50% --reverse)
        else
            echo -e "${BLUE}Available PR templates:${NC}"
            for i in "${!TEMPLATE_FILES[@]}"; do
                echo "$((i+1)). ${TEMPLATE_FILES[$i]##*/}" # Display just the filename
            done
            echo -e -n "${BLUE}Enter the number for the PR template:${NC} "
            read -r template_num
            if ! [[ $template_num =~ ^[0-9]+$ ]] || [ $template_num -lt 1 ] || [ $template_num -gt ${#TEMPLATE_FILES[@]} ]; then
                echo -e "${YELLOW}Invalid selection. Using the first template as default.${NC}"
                template_num=1
            fi
            SELECTED_TEMPLATE="${TEMPLATE_FILES[$((template_num-1))]}"
        fi
    else
        echo -e "${YELLOW}No PR template found in the template directory. Continuing without a template.${NC}"
        SELECTED_TEMPLATE=""
    fi
else
    echo -e "${YELLOW}No PR template found. Continuing without a template.${NC}"
    SELECTED_TEMPLATE=""
fi

# Construct ISSUE_CONTENT
ISSUE_CONTENT="Related to #$ISSUE_NUMBER (${ISSUE_TITLE})."

# Prepare PR_BODY by replacing placeholder in the template or creating a new content
if [ -n "$SELECTED_TEMPLATE" ]; then
    PR_TEMPLATE_CONTENT=$(cat "$SELECTED_TEMPLATE")
    # Replace the placeholder with ISSUE_CONTENT
    # Assuming ISSUE_CONTENT and PR_TEMPLATE_CONTENT have been defined earlier in the script

    # Pre-fill the PR body with the selected template and then replace the placeholder
    # Replace the marker in the template with the actual issue-related content
    # Prepare ISSUE_CONTENT for sed, ensuring it handles new lines correctly.
    FORMATTED_ISSUE_CONTENT=$(echo "$ISSUE_CONTENT" | awk '{printf "%s\\n", $0}' ORS='')

    # Directly replacing in sed with an escaped version for special characters
    # Ensure that the placeholder in your PR template matches exactly, including spaces and asterisks
    PR_BODY=$(echo "$PR_TEMPLATE_CONTENT" | sed "s|\*\* any additional useful context or info \*\*|$FORMATTED_ISSUE_CONTENT|")
else
    PR_BODY="$ISSUE_CONTENT"
fi


# Remove YAML front matter from PR template
# This uses a sed command to delete everything between the first set of "---"
PR_BODY_NO_HEADER=$(echo "$PR_BODY" | sed '/^---$/,/^---$/d')


# Prepare the file for user editing
echo -e "${BLUE}Please review the PR details in the editor. You can make additional changes as needed.${NC}"
TEMP_PR_BODY_FILE=$(mktemp)
echo -e "$PR_BODY_NO_HEADER" > "$TEMP_PR_BODY_FILE"
${EDITOR:-vi} "$TEMP_PR_BODY_FILE"
PR_BODY=$(cat "$TEMP_PR_BODY_FILE")
rm "$TEMP_PR_BODY_FILE"

# Ask about WIP status
echo -e -n "${BLUE}Create this PR as Work In Progress (WIP)? (Y/n):${NC} "
read -r WIP_REPLY
WIP_FLAG=""
if [[ ! $WIP_REPLY =~ ^[Nn]$ ]]; then
    WIP_FLAG="--draft"
    echo -e "${YELLOW}PR will be created as a draft (WIP).${NC}"
else
    echo -e "${GREEN}PR will be created as ready for review.${NC}"
fi
echo "-------------------------------------------------"

# Confirm before creating the PR
echo -e "${YELLOW}Review the PR details:${NC}"
echo -e "${BLUE}Title:${NC} $PR_TITLE"
echo -e "${BLUE}Body:${NC} $PR_BODY"
echo -e "${BLUE}Status:${NC} $([ -n "$WIP_FLAG" ] && echo "Draft (WIP)" || echo "Ready for review")"
echo "-------------------------------------------------"
echo -e -n "${BLUE}Create the PR? (y/N):${NC} "
read -r CREATE_PR_REPLY
if [[ $CREATE_PR_REPLY =~ ^[Yy]$ ]]; then
    # Create the pull request
    gh pr create --title "$PR_TITLE" --body "$PR_BODY" $WIP_FLAG
    echo -e "${GREEN}PR created successfully!${NC}"
    if [ -n "$WIP_FLAG" ]; then
        echo -e "${BLUE}Note: PR created as draft. Mark as ready for review when complete.${NC}"
    fi
else
    echo -e "${YELLOW}PR creation cancelled.${NC}"
fi